---
title: "Refugee Movement in Ukraine"
author: "Seyram A. Butame"
date: last-modified
date-format: "DD-MM-YYYY"
title-block-banner: "#7B848F"
format:
  html:
    toc: true
    code-fold: true
    code-overflow: wrap
    css: styles.css
bibliography: https://api.citedrive.com/bib/94ea4ce6-0d99-4cf2-9f69-7ac984099349/references.bib?x=eyJpZCI6ICI5NGVhNGNlNi0wZDk5LTRjZjItOWY2OS03YWM5ODQwOTkzNDkiLCAidXNlciI6ICIxOTAyIiwgInNpZ25hdHVyZSI6ICI1YjQyYWJhMGJjN2EwZDRkZGJhNjJjNjAyNTVlODljYzNmMWYyOTYyODMzN2E0YWViYzViYTExNGU5NjYzZTUxIn0=/bibliography.bib
csl: nature.csl
editor: source
always_allow_html: true
---

## Ukraine Refugee Situation

I am attempting to replicate the below map from Tanya Shapiro. It is a useful skill to have and this particular type of visual display is used frequently in showing the movement of populations on a map.
The point of the map is to show the Refugees from Ukraine who applied for Asylbum, TP or similar national protection schemes in the neighboring countries following the Russian invasion. The countries that share borders with Ukraine include:

- Poland
- Belarus
- Republic of Moldova
- Slovakia
- Hungary
- Romania
- Russia

Interesting note, while Russia and Belarus are the aggressors in this conflict, refugee and asylum seeking behaviors, may be influenced by other socio-cultural factors. Hence you have Ukrainian nationals fleeing to Russia and Belarus to escape the fighting. 


```{r}
# ---- REQUIRED PACKAGES

library(maps)
library(mapproj)
library(tidyverse)
library(ggtext)
library(showtext)


```

## DATA FROM UNCHR

The pulled data corresponds with Refugees from Ukraine recorded in country as of date (October 20, 2023). The reported figures for the Russian Federation include Ukrainian residents granted fefugee or temporary asylum status, as well as thosed recorded in the country in 2022 under other forms of stay.

### Map DATA

```{r}
# ---- WORLD MAP DATA

# Import the map dataframe from the maps library 

map1 <- map_data("world")

# ---- UKRAINE REGUGEE DATA
# Source is https://data2.unhcr.org/en/situations/ukraine
# Create a data frame with refugee data

countries<-c("Ukraine","Poland","Hungary","Moldova","Slovakia","Romania","Russia","Belarus")
refugees <-c(0,649903,144738,103254, 90329,57192,53300,384)


df1 <- tibble(
  countries = countries,
  refugees = refugees)

```

### Define Colors

I want to define the colors of the map. We do as below.

```{r}
# DEFINE COLORS -----
# Set fill colors per region. 
# Ukraine = Blue
# Russia & Belarus = red
# Neighboring countries= green
# Countries that are not immediately bordering (i.e., "other") = grey

map1 <- map1 %>%
  mutate(fill = case_when(
    region == "Ukraine"~"#90BFEE",
    region %in% c("Russia","Belarus") ~ "#CB9DA7",
    region %in% countries ~ "#79BD9D",
    TRUE ~ "grey85"
    ))
```

## DATA WRANGLING

```{r, wranglingm, message=FALSE, warning=FALSE}

# DATA FRAME ----
# create dataframe for points of information
ptdata1 <- map1 %>%
  group_by(region) %>%
  # create centroids for lat long per region
  filter(region %in% countries & region != "Ukraine")%>%
  summarise(lat = mean(lat),
            long = mean(long)) %>%
  # append refugee data
  left_join(df1, by=c("region" = "countries"))%>%
  mutate(
         #override Russia centroid, map cut-off
         lat = replace(lat, region == "Russia", 52),
         long = replace(long, region == "Russia",39),
         #include Ukrainian label coordinates as starting point for migration lines
         lat_ukr = 49.25, 
         long_ukr = 31.5,
         #add vjust parameters to adjust text data in plots
         region_vjust = case_when(refugees > 60000 ~ -.8, TRUE ~ -4),
         stat_vjust = case_when(refugees > 60000 ~1.1, TRUE~0.1),
         name_color = case_when(refugees > 60000 ~ '#1A5A9A', TRUE ~"white")
  )

#Ukraine label
txtdata1 <- tibble(
  text= "UKRAINE", 
  lat = 49.25, 
  long = 31.5
)

# POINT CITIES -----
#import city coordinates from map library  

data(world.cities)

# filter world cities for Ukrainian cities
# use top 5 most populous cities

ukr_cities <- world.cities %>% filter(country.etc =="Ukraine") %>% arrange(-pop) %>% head(5)

```

## DEFINE FONT

```{r, font, warning=FALSE, message=FALSE}

font_add('fa6-brands', '/Users/seyramb/Library/Fonts/Font Awesome 6 Brands-Regular-400.otf')
font_add('Quicksand', '/Users/seyramb/Library/Fonts/Quicksand-Regular.ttf')
font_add_google(name = "Arvo", family = "Arvo")
showtext_auto()

# font_add_google("Arvo", family = "title") 
font_add_google("Arvo", family = "title") 
font_add_google("Arvo", family = "subtitle")
font_add_google("Arvo", family = "text")  
font_add_google("Arvo", family = "caption")
showtext_auto()     


```

## DEFINE TITLES 

```{r, titles, warning=FALSE, message=FALSE}

tt <- str_glue("Data and Plot Learning<br>")  
tw <- str_glue("<span style='font-family:fa6-brands'>&#xf099;</span>") # Defines my twitter
gh <- str_glue("<span style='font-family:fa6-brands'>&#xf09b;</span>") # Defines my github
lk <- str_glue("<span style='font-family:fa6-brands'>&#xf08c;</span>") # Defines my LinkedIn account

title_text    <- str_glue("NUMBER OF UKRAINIAN REFUGEES IN NEIGHBORING EUROPEAN COUNTRIES") 
sub_text      <- str_glue("The number of Ukrainian refugees in neighboring countries.")
cap_text      <- str_glue("{tt} Visualization: {tw} @butames &bull; {lk} @butames Code: {gh} butames &bull; Tools: #rstats #ggplot")

```

## PLOT UKRAINIAN REFUGEES

```{r}

# CREATE PLOT -----
 pl1 <- map1 %>%
  ggplot(aes(long, lat, group=group)) +
  geom_polygon(aes(fill = fill), color="white", size=0.3) +
  #migration lines
  geom_segment(inherit.aes=FALSE, data=ptdata1, aes(x=long_ukr, xend=long, y=lat_ukr, yend=lat), size=0.8,
               linetype="dotted", color='#1A5A9A') +
  #overlay Ukrainian country map
  geom_polygon(data = map1 %>% filter(region=="Ukraine"), aes(fill=fill), color="white", size=0.3) +
  #plot refugee bubbles
  geom_point(inherit.aes=FALSE, data = ptdata1, aes(long, lat, size=refugees/100), fill='#90BFEE',
             color='#579DE2', shape=21) +
  #overlay refugee numbers
  geom_text(inherit.aes=FALSE, data=ptdata1, aes(long, lat,label=scales::comma(refugees),
                                                    vjust=stat_vjust), size=6.5, family="Arvo", color='#1A5A9A') +
  #overlay country names
  geom_text(inherit.aes=FALSE, data= ptdata1, aes(long, lat, label=toupper(region), vjust=region_vjust,
                                                     color=name_color), size=6.5, family="Arvo") +
  #Ukraine label
  geom_text(inherit.aes=FALSE, data = txtdata1, aes(long, lat, label=text), size=12, family="Arvo",
            color='#1A5A9A') +
  #Ukrainian cities
  geom_point(inherit.aes=FALSE, data = ukr_cities, aes(long,lat), color='#1A5A9A') +
  geom_text(inherit.aes=FALSE, data = ukr_cities, aes(long,lat,label=name), size=9, vjust=1.7, family="Arvo", color='#1A5A9A') +

  ##   Match colors with data frame ----
# set the fill and color color to match the inputs from the dataframe with "scale_identity
  scale_fill_identity() +
  scale_color_identity() +
  scale_size(range=c(9, 37), breaks=c(100, 150, 200, 250, 500), guide="none") +

  ## Limit data to the Ukraine Region ----  
# adjust section of world map to focus on Ukraine and neighboring countries with xlim & ylim

  coord_map(xlim=c(15, 42),
            ylim=c(44, 55)) +
  
  ## Add Titles and Labels ----
#add title and themes
  labs(x = "",
       y = "",
       title = title_text,
       subtitle = sub_text,
       caption = cap_text) +
  
  ## Theme the Plot -----
  theme_minimal() +
  
  theme(plot.title.position = "plot",
        plot.caption.position = "plot",
        legend.position = "top",
        
        plot.background = element_blank(),
        panel.background = element_blank(),
        plot.margin = margin(t = 10, b = 10, r = 10, l = 10),
        axis.title = element_blank(),
        axis.line.x = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        
        plot.title            = element_markdown(
          family              = "title",
          face                = "bold",
          size                = 22,
          hjust               = 0.5,
          halign              = 0.5,
          margin              = margin(t =10, b = 5)),
        plot.subtitle         = element_markdown(
          family              = "text",
          size                = 18,
          hjust               = 0.5,
          halign              = 0.5,
          margin              = margin(t = 5, b = 10)),
        plot.caption          = element_markdown(
            family            = "caption",
            lineheight        = 0.6,
            size              = 18,
            hjust             = 0.5,
            halign            = 0.5,
            margin            = margin(t = 10, b = 10))
        )

```

```{r}
pl1
```

 
```{r}

pl1 <- ggsave("ukranian_refugees.jpeg", height=8.5, width=12)

```



